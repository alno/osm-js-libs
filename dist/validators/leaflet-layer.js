// Generated by CoffeeScript 1.3.1
(function() {
  var ValidatorsLayer;

  ValidatorsLayer = (function() {

    ValidatorsLayer.name = 'ValidatorsLayer';

    ValidatorsLayer.callbacks = {};

    ValidatorsLayer.callbackCounter = 0;

    ValidatorsLayer.jsonpRequest = function(url, cb) {
      var callback, counter, delim, el,
        _this = this;
      counter = (this.callbackCounter += 1);
      callback = "OsmJs.Validators.LeafletLayer.callbacks[" + counter + "]";
      this.callbacks[counter] = function(data) {
        _this.callbacks[counter] = void 0;
        return cb(data);
      };
      delim = url.indexOf('?') >= 0 ? '&' : '?';
      el = document.createElement('script');
      el.src = "" + url + delim + "callback=" + callback;
      return document.getElementsByTagName('body')[0].appendChild(el);
    };

    function ValidatorsLayer(options) {
      var validator, _i, _len, _ref;
      this.options = options;
      this.layers = {};
      _ref = this.options.validators;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        validator = _ref[_i];
        this.layers[validator.url] = new L.LayerGroup();
      }
      this.limitedUpdate = L.Util.limitExecByInterval(this.update, 2000, this);
    }

    ValidatorsLayer.prototype.onAdd = function(map) {
      var key, layer, _ref;
      this.map = map;
      _ref = this.layers;
      for (key in _ref) {
        layer = _ref[key];
        map.addLayer(layer);
      }
      map.on('move', this.limitedUpdate, this);
      map.on('moveend', this.update, this);
      map.on('viewreset', this.update, this);
      return this.update();
    };

    ValidatorsLayer.prototype.onRemove = function(map) {
      var key, layer, _ref;
      map.off('viewreset', this.update, this);
      map.off('moveend', this.update, this);
      map.off('move', this.limitedUpdate, this);
      _ref = this.layers;
      for (key in _ref) {
        layer = _ref[key];
        map.removeLayer(layer);
      }
      return this.map = void 0;
    };

    ValidatorsLayer.prototype.update = function() {
      var bounds, layer, ne, sw, url, validator, _i, _len, _ref, _results,
        _this = this;
      _ref = this.options.validators;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        validator = _ref[_i];
        bounds = this.map.getBounds();
        sw = bounds.getSouthWest();
        ne = bounds.getNorthEast();
        url = validator.url.replace('{minlat}', sw.lat).replace('{maxlat}', ne.lat).replace('{minlon}', sw.lng).replace('{maxlon}', ne.lng);
        layer = this.layers[validator.url];
        _results.push(ValidatorsLayer.jsonpRequest(url, function(data) {
          var res, resLayer, _j, _len1, _ref1;
          map.removeLayer(layer);
          layer.clearLayers();
          _ref1 = data.results;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            res = _ref1[_j];
            resLayer = new L.GeoJSON({
              type: 'Feature',
              geometry: res.geometry
            });
            resLayer.bindPopup(res.text || validator.types[res.type].text);
            layer.addLayer(resLayer);
          }
          return map.addLayer(layer);
        }));
      }
      return _results;
    };

    return ValidatorsLayer;

  })();

  if (!this.OsmJs) {
    this.OsmJs = {};
  }

  if (!this.OsmJs.Validators) {
    this.OsmJs.Validators = {};
  }

  this.OsmJs.Validators.LeafletLayer = ValidatorsLayer;

}).call(this);
