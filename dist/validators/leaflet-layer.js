// Generated by CoffeeScript 1.3.1
(function() {
  var ValidatorsLayer;

  ValidatorsLayer = (function() {

    ValidatorsLayer.name = 'ValidatorsLayer';

    ValidatorsLayer.callbacks = {};

    ValidatorsLayer.callbackCounter = 0;

    ValidatorsLayer.request = function(url, validator, cb) {
      var xhr;
      if (validator.jsonp) {
        return this.jsonpRequest(url, cb);
      } else {
        xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            if (xhr.status === 200) {
              return cb(eval("(" + xhr.responseText + ")"));
            }
          }
        };
        return xhr.send();
      }
    };

    ValidatorsLayer.jsonpRequest = function(url, cb) {
      var callback, counter, delim, el,
        _this = this;
      counter = (this.callbackCounter += 1);
      callback = "OsmJs.Validators.LeafletLayer.callbacks[" + counter + "]";
      this.callbacks[counter] = function(data) {
        _this.callbacks[counter] = void 0;
        return cb(data);
      };
      delim = url.indexOf('?') >= 0 ? '&' : '?';
      el = document.createElement('script');
      el.src = "" + url + delim + "callback=" + callback;
      return document.getElementsByTagName('body')[0].appendChild(el);
    };

    function ValidatorsLayer(options) {
      var validator, _i, _len, _ref;
      this.options = options;
      this.layers = {};
      _ref = this.options.validators;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        validator = _ref[_i];
        this.layers[validator.url] = new L.LayerGroup();
      }
      this.limitedUpdate = L.Util.limitExecByInterval(this.update, 2000, this);
    }

    ValidatorsLayer.prototype.onAdd = function(map) {
      var key, layer, _ref;
      this.map = map;
      _ref = this.layers;
      for (key in _ref) {
        layer = _ref[key];
        map.addLayer(layer);
      }
      map.on('move', this.limitedUpdate, this);
      map.on('moveend', this.update, this);
      map.on('viewreset', this.update, this);
      return this.update();
    };

    ValidatorsLayer.prototype.onRemove = function(map) {
      var key, layer, _ref;
      map.off('viewreset', this.update, this);
      map.off('moveend', this.update, this);
      map.off('move', this.limitedUpdate, this);
      _ref = this.layers;
      for (key in _ref) {
        layer = _ref[key];
        map.removeLayer(layer);
      }
      return this.map = void 0;
    };

    ValidatorsLayer.prototype.update = function() {
      var validator, _i, _len, _ref, _results;
      _ref = this.options.validators;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        validator = _ref[_i];
        _results.push(this.updateValidator(validator));
      }
      return _results;
    };

    ValidatorsLayer.prototype.updateValidator = function(validator) {
      var bounds, layer, ne, sw, url,
        _this = this;
      bounds = this.map.getBounds();
      sw = bounds.getSouthWest();
      ne = bounds.getNorthEast();
      url = validator.url.replace('{minlat}', sw.lat).replace('{maxlat}', ne.lat).replace('{minlon}', sw.lng).replace('{maxlon}', ne.lng);
      layer = this.layers[validator.url];
      return ValidatorsLayer.request(url, validator, function(data) {
        var res, _i, _len, _ref;
        map.removeLayer(layer);
        layer.clearLayers();
        _ref = data.results;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          res = _ref[_i];
          layer.addLayer(_this.buildResult(validator, res));
        }
        return map.addLayer(layer);
      });
    };

    ValidatorsLayer.prototype.buildResult = function(validator, res) {
      var errorText, obj, popupText, resLayer, _i, _len, _ref;
      errorText = res.text || validator.types[res.type].text;
      popupText = "<p>" + errorText + "</p>";
      if (res.objects) {
        popupText += "<ul>";
        _ref = res.objects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          popupText += "<li><a href=\"http://www.openstreetmap.org/browse/" + obj[0] + "/" + obj[1] + "\" target=\"_blank\">" + (obj.join('-')) + "</a></li>";
        }
        popupText += "</ul>";
      }
      resLayer = new L.GeoJSON({
        type: 'Feature',
        geometry: res.geometry
      });
      resLayer.bindPopup(popupText);
      return resLayer;
    };

    return ValidatorsLayer;

  })();

  if (!this.OsmJs) {
    this.OsmJs = {};
  }

  if (!this.OsmJs.Validators) {
    this.OsmJs.Validators = {};
  }

  this.OsmJs.Validators.LeafletLayer = ValidatorsLayer;

}).call(this);
